<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tun Blog</title>
    <description>山本无忧，因雪白头；水本无愁，因风起皱；我本无忧，应该欢喜</description>
    <link>http://localhost:4000/tuyuwang.github.io/</link>
    <atom:link href="http://localhost:4000/tuyuwang.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 20 Nov 2017 14:37:47 +0800</pubDate>
    <lastBuildDate>Mon, 20 Nov 2017 14:37:47 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>iOS开发小技巧</title>
        <description>&lt;h2 id=&quot;分类&quot;&gt;分类&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#tableView&quot;&gt;UITableView系列&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#textField&quot;&gt;UITextField系列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;tableView&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;uitableview系列&quot;&gt;UITableView系列&lt;/h3&gt;

&lt;h4 id=&quot;uitableviewcell灰线显示方案&quot;&gt;UITableViewCell灰线显示方案&lt;/h4&gt;

&lt;p&gt;思路：重写UItableViewCell， 将需要显示的子视图都添加到contenView上，并进行约束，将cell的颜色设置为白色，contentView的颜色设置为灰色，定义接口设置contentView的edges，可通过传入正数或负数控制灰线显示顶部还是底部和灰线的高度&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension UITableViewCell {
    public func setLineHeight(_ height: Int) {
        let top = max(height, 0)
        let bottom = abs(min(height, 0))
        contentView.snp.updateConstraints { (ConstraintMaker) in
            ConstraintMaker.edges.equalTo(UIEdgeInsetsMake(top, 0, bottom, 0))
        }
        layoutSubviews()
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p id=&quot;textField&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;uitextfield系列&quot;&gt;UITextField系列&lt;/h3&gt;

&lt;h4 id=&quot;调整textfield内容显示-如图&quot;&gt;调整textField内容显示, 如图&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://tuyuwang.github.io/img/Tips/demo-0.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//重写
- (CGRect)leftViewRectForBounds:(CGRect)bounds
{
    CGRect iconRect = [super leftViewRectForBounds:bounds];
    iconRect.origin.x += 10;// 右偏10
    return iconRect;
}

- (CGRect)textRectForBounds:(CGRect)bounds
{
    CGRect iconRect = [super textRectForBounds:bounds];
    iconRect.origin.x += 10;// 右偏10
    return iconRect;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 08 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tuyuwang.github.io/2017/09/08/Tips/</link>
        <guid isPermaLink="true">http://localhost:4000/tuyuwang.github.io/2017/09/08/Tips/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>Alamofire实战记录</title>
        <description>&lt;h3 id=&quot;urlrequestconvertible-协议的使用&quot;&gt;URLRequestConvertible 协议的使用&lt;/h3&gt;

&lt;p&gt;创建一个路由枚举，调用效果如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let loginRequest = EnterRouter.login(userPhone, userPassword)
        request(loginRequest).responseJSON { (respone) in
            print(JSON(respone.result.value ?? &quot;&quot;))
        }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
let baseURL = &quot;http://xxxxx&quot;
var TNParamters = [String: String]()

enum EnterRouter: URLRequestConvertible {
    
    case login(String, String)
    case regist(String, String, String)
    case logout
    
    private var httpMethod: HTTPMethod {
        return .post
    }
    
    private var method: String {
        switch self {
        case .login:
            return &quot;user.login&quot;
        case .regist:
            return &quot;user.regist&quot;
        case .logout:
            return &quot;user.logout&quot;
        }
    }
    
    private var paramters: [String: Any] {
        
        switch self {
        case .login(let userName, let password):
            TNParamters.updateValue(userName, forKey: &quot;phoneNo&quot;)
            TNParamters.updateValue(password, forKey: &quot;password&quot;)
            return baseParamters
            
        case .regist(let userName, let password, let verifyCode):
            
            TNParamters.updateValue(userName, forKey: &quot;phoneNo&quot;)
            TNParamters.updateValue(password, forKey: &quot;password&quot;)
            TNParamters.updateValue(verifyCode, forKey: &quot;verifyCode&quot;)
            return baseParamters
            
        case .logout:
            
            return baseParamters
        }
    }
    
    private var baseParamters: [String: Any] {
            TNParamters.updateValue(method, forKey: &quot;method&quot;)
            return TNParamters
    }
    
    func asURLRequest() throws -&amp;gt; URLRequest {
        
        let url = URL(string: baseURL)
        var request = URLRequest(url: url!)
        request.httpMethod = httpMethod.rawValue
        do {
            let result = try URLEncoding.default.encode(request, with: paramters)
            return result
        } catch let error {
            return request
        }
    }


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 03 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tuyuwang.github.io/2017/09/03/Alamofire/</link>
        <guid isPermaLink="true">http://localhost:4000/tuyuwang.github.io/2017/09/03/Alamofire/</guid>
        
        <category>iOS</category>
        
        <category>Swift</category>
        
        
      </item>
    
      <item>
        <title>Welcome to Tun Blog</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Hello World, Hello Blog.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#preview&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tools&quot;&gt;工具&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#build1&quot;&gt;搭建本地博客&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#build2&quot;&gt;部署线上博客&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;前言&quot;&gt;前言&lt;/h4&gt;

&lt;p&gt;我说：要有blog。所以就有了Tun Blog。&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;tools&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;工具&quot;&gt;工具&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Jekylly&lt;/li&gt;
  &lt;li&gt;GitHub Pages&lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;build1&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;搭建本地博客&quot;&gt;搭建本地博客&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;安装Jeklly
    &lt;blockquote&gt;
      &lt;p&gt;gem install jekyll&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;创建blog文件
    &lt;blockquote&gt;
      &lt;p&gt;jekyll new blog&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;进入blog文件
    &lt;blockquote&gt;
      &lt;p&gt;cd blog&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;运行服务
    &lt;blockquote&gt;
      &lt;p&gt;jekyll serve&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;打开浏览器
    &lt;blockquote&gt;
      &lt;p&gt;http://localhost:4000&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;p&gt;blog文件结构&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_cofig.yml  #配置全局信息
_posts      #存放博文(有一个markdown的默认博文)
_site       #存放jekyll转化生成的页面
about.md    #关于
Gemfile
Gemfile.lock
index.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;hr /&gt;
&lt;p&gt;jekyll常用命令&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll build             #修改内容后使用，更新界面
jekyll serve -B          #后台运行服务
jekyll serve             #运行服务
jekyll serve --watch     #可以边修改，边刷新界面
ps aux|grep jekyllch     #查看jekyll后台运行的进程
kill -9 线程号            #关闭线程，在同一个jekyll生成的文件下，只能运行一个进程 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p id=&quot;build2&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;部署线上博客&quot;&gt;部署线上博客&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Create a new respository, Respository name -&amp;gt; yourGithubUserName.github.io&lt;/li&gt;
  &lt;li&gt;Choose a theme on Settings&lt;/li&gt;
  &lt;li&gt;Clone this Respository&lt;/li&gt;
  &lt;li&gt;Copy the blog content file to Respository ,then commit change to github&lt;/li&gt;
  &lt;li&gt;Open the URL : https://yourGithubUserName.github.io&lt;/li&gt;
&lt;/ol&gt;

&lt;p id=&quot;resources&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;参考资料&quot;&gt;参考资料&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekylly官网&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Huxpro/huxpro.github.io/blob/master/README.zh.md&quot;&gt;Theme by Hux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 18 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tuyuwang.github.io/2017/05/18/Hello/</link>
        <guid isPermaLink="true">http://localhost:4000/tuyuwang.github.io/2017/05/18/Hello/</guid>
        
        <category>生活</category>
        
        
      </item>
    
  </channel>
</rss>
