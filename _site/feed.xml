<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tun Blog</title>
    <description>山本无忧，因雪白头；水本无愁，因风起皱；我本无忧，应该欢喜</description>
    <link>http://localhost:4000/tuyuwang.github.io/</link>
    <atom:link href="http://localhost:4000/tuyuwang.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 15 Aug 2018 18:01:14 +0800</pubDate>
    <lastBuildDate>Wed, 15 Aug 2018 18:01:14 +0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>iOS面试</title>
        <description>&lt;h5 id=&quot;基础&quot;&gt;基础&lt;/h5&gt;

&lt;p&gt;1、OC&lt;/p&gt;

&lt;p&gt;2、&lt;/p&gt;

&lt;h5 id=&quot;进阶&quot;&gt;进阶&lt;/h5&gt;

&lt;h5 id=&quot;探索&quot;&gt;探索&lt;/h5&gt;

&lt;h5 id=&quot;其他&quot;&gt;其他&lt;/h5&gt;

&lt;p&gt;1、如何判断上传和下载文件操作成功&lt;/p&gt;

&lt;p&gt;用MD5验证数据完整性&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tuyuwang.github.io/2018/08/03/iOS%E9%9D%A2%E8%AF%95/</link>
        <guid isPermaLink="true">http://localhost:4000/tuyuwang.github.io/2018/08/03/iOS%E9%9D%A2%E8%AF%95/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>Python VS 拉钩</title>
        <description>&lt;h4 id=&quot;前言&quot;&gt;前言&lt;/h4&gt;

&lt;p&gt;俗话说实践出真知，理论学习不如动手实践的印象深，于是直接进入Python实战阶段，通过爬取拉钩的岗位信息，并做筛选，针对符合条件的岗位进行自动化投递简历这个项目来检验最近所学。&lt;/p&gt;

&lt;p&gt;首先分析一下怎么实现:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#login&quot;&gt;模拟登陆拉钩网&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#search&quot;&gt;根据岗位确定需要爬取的总页数&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#link&quot;&gt;找出每一页岗位信息的链接&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#ip&quot;&gt;添加代理和针对性的header&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#start&quot;&gt;开始爬虫&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#data&quot;&gt;对数据进行处理&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#filter&quot;&gt;对符合条件的岗位进行投递简历&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#timer&quot;&gt;定时开启任务&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用的工具:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Scrapy&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Selenium&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Firefox&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pandas&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里使用&lt;a href=&quot;http://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/overview.html&quot;&gt;Scrapy&lt;/a&gt;为爬虫的主体框架，用&lt;a href=&quot;https://www.cnblogs.com/BigFishFly/p/6380024.html&quot;&gt;Selenium&lt;/a&gt;来进行模拟登陆请求和使用&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/&quot;&gt;Pandas&lt;/a&gt;进行数据处理&lt;/p&gt;

&lt;p&gt;先讲解一下Scrapy的基本知识 -&amp;gt; &lt;a href=&quot;#jump&quot;&gt;略过&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scrapy(1.5.0)常用命令:&lt;/p&gt;

&lt;p&gt;1、初始化爬虫项目:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;scrapy startproject projectName [project_dir]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2、创建爬虫:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;scrapy genspider spiderName domain.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3、运行爬虫:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;scrapy crawl spiderName&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ok,使用以上命令创建拉钩项目&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//在本目录下创建项目
scrapy startproject lagou
scrapy genspider lg lagou.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行完毕后，呈现以下目录结构&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── scrapy.cfg
├── lagou                   //项目文件夹
├── |
├── ├── __init__.py 
├── └── __pycache__
├── ├── items.py            //数据模型，保存爬取到的数据的容器
├── └── middlewares.py      //中间件，用于截取请求，增加自定义操作
├──    ├── pipelines.py     //管道，处理爬取的数据
├──    └── settings.py      //配置文件，用于配置全局
├──    └── spiders          //爬虫文件夹
├──         ├── __init__.py 
├──         └── __pycache__
├──         └── lg.py       //lg爬虫，爬虫操作入口
      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p id=&quot;jump&quot;&gt;&lt;/p&gt;
&lt;p id=&quot;login&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;模拟登陆拉钩&quot;&gt;模拟登陆拉钩&lt;/h4&gt;

&lt;p&gt;从拉钩上获取登陆页面的&lt;a href=&quot;https://passport.lagou.com/login/login.html?ts=1531298207868&amp;amp;serviceId=lagou&amp;amp;service=https%253A%252F%252Fwww.lagou.com%252F&amp;amp;action=login&amp;amp;signature=31C3FF0842AEC92EA441C805FD0CA82B&quot;&gt;链接&lt;/a&gt;,然后使用Selenium+无头的firefox进行模拟登陆&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python &lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Keys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium.webdriver.firefox.options&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Options&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebDriverWait&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium.webdriver.support&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_conditions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EC&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'https://passport.lagou.com/login/login.html?ts=1528767630158&amp;amp;serviceId=lagou&amp;amp;service=https&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%3&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%2&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%2&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Fwww.lagou.com&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%2&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;F&amp;amp;action=login&amp;amp;signature=074A3727AC575DBFF567FBE036F6216B'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#创建无头火狐浏览器&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-headless'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Firefox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firefox_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#获取登陆页面&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#根据页面标签获取输入框&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#等待页面加载，最长10s &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;usertf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebDriverWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;until&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#直到用户输入框加载完成&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presence_of_element_located&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XPATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'//div[@data-propertyname=&quot;username&quot;]/input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        

&lt;span class=&quot;n&quot;&gt;passtf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebDriverWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;until&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presence_of_element_located&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XPATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'//div[@data-propertyname=&quot;password&quot;]/input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#获取登陆按钮&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loginbt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'//div[@data-propertyname=&quot;submit&quot;]/input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#输入用户名&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;usertf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xxxxxxxxx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#休眠，防止被检测为机器人&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#输入密码&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;passtf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xxxxxxx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#点击登陆&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loginbt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;c&quot;&gt;#假如账号密码有误&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;valid_msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'//span[@data-valid-message=&quot;&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valid_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'innerHTML'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在开发中时，可以禁用无头Firefox，这样方便调试:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;driver = webdriver.Firefox()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p id=&quot;search&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;根据岗位确定需要爬取的总页数&quot;&gt;根据岗位确定需要爬取的总页数&lt;/h4&gt;

&lt;p&gt;在拉钩网上进入iOS职位的页面，找到页面底部的页码进行分析:
&lt;img src=&quot;https://tuyuwang.github.io/img/python/lagou-01.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;显而易见，页数是根据服务器返回的数据确定的，所以这边pager_container的div是异步获取的，因此需要通过等待页面加载完毕才能读取页数:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;page_url = &quot;https://www.lagou.com/jobs/list_iOS?city=%E6%B7%B1%E5%9C%B3&amp;amp;cl=false&amp;amp;fromSearch=true&amp;amp;labelWords=&amp;amp;suginput=&quot;

driver.get(page_url)

element = WebDriverWait(driver, 10).until(
    EC.presence_of_element_located((By.CLASS_NAME, 'pager_is_current'))
)

elements = driver.find_elements_by_xpath(&quot;//span[@class='pager_not_current']&quot;)


page_count = elements[-1].get_attribute('innerHTML')

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;等待页面元素div:class=pager_is_current被加载出来，然后找出所有的pager_not_current的span，其中最后一个就是总页数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;driver.find_elements_by_xpath() //返回找到的所有对象
driver.find_element_by_xpath()  //返回找到的第一个对象
get_attribute('innerHTML')      //获取标签对里的内容
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p id=&quot;link&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;找出每一页岗位信息的链接&quot;&gt;找出每一页岗位信息的链接&lt;/h4&gt;
&lt;p&gt;岗位信息同样是通过Ajax异步获取的数据，可以从图中显示的消息头中获取真实的请求网址和参数:
&lt;img src=&quot;https://tuyuwang.github.io/img/python/lagou-02.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以下是基本参数&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;base_url = &quot;https://www.lagou.com/jobs/positionAjax.json?&quot;
params = {
        'city':'', #城市
        'kd': '',  #岗位
        'pn': '1', #页码
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;通过网页上的操作，同样可以获取其他的筛选参数，这里就不一一阐述了。&lt;/p&gt;

&lt;p id=&quot;ip&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;添加代理和针对性的header&quot;&gt;添加代理和针对性的header&lt;/h4&gt;
&lt;p&gt;在Scrapy项目中，可以通过中间件(Middleware)添加代理ip和修改header,使用时需要在settings.py中激活中间件:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//在DOWNLOADER_MIDDLEWARES中添加
lagou.middlewares.MyUserAgentMiddleware': 401
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在middlewares.py中添加自定义的中间件:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from scrapy.downloadermiddlewares.useragent import UserAgentMiddleware
import random

//获取代理ip组
proxy_list = get_ip()

class MyUserAgentMiddleware(UserAgentMiddleware):
    '''
    设置User-Agent
    '''
    //为header更改referurl，提高爬取成功率
    refers = ['ios', 'python', 'andriod', 'html5', 'java']

    def __init__(self, user_agent):
        self.user_agent = user_agent

    @classmethod
    def from_crawler(cls, crawler):
        return cls(
            //从setting.py中获取MY_USER_AGENT组
            user_agent=crawler.settings.get('MY_USER_AGENT')
        )

    def process_request(self, request, spider): 
        //添加代理ip       
        request.meta['proxy'] = 'http://%s' % random.choice(proxy_list)

        //添加user_agent
        agent = random.choice(self.user_agent)

        //针对拉钩，随机更改referer，伪装正常访问
        r1 = random.choice(self.refers)
        r2 = random.choice(self.refers)
        refer = 'https://www.lagou.com/jobs/list_{}?oquery={}&amp;amp;fromSearch=true&amp;amp;labelWords=relative&amp;amp;city=%E6%B7%B1%E5%9C%B3'.format(r1, r2) 

        request.headers['User-Agent'] = agent
        request.headers['Referer'] = refer
        print('User-Agent:' + agent)
        print('Proxy:' + request.meta['proxy'].strip())
        print('Referer:' + refer)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于修改headers中Referer的值，是比较重要的。随机更改其值后，显著提高爬取成功率。&lt;/p&gt;

&lt;p id=&quot;start&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;开始爬虫&quot;&gt;开始爬虫&lt;/h4&gt;
&lt;p&gt;首先需要了解Scrapy的爬虫运行流程，以本项目为例，当爬虫运行时，默认调用LgSpider中的start_requests()进行请求，然后这个方法里提交的所有请求都会经过中间件MyUserAgentMiddleware,在获取数据后，会返回在LgSpider中的parse()方法进行解析，转化模型。最后通过LagouPipeline进行数据处理。&lt;/p&gt;

&lt;p&gt;定义模型items.py&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class LagouItem(scrapy.Item):
    job_name = scrapy.Field()   #岗位名称
    job_addr = scrapy.Field()   #上班地址
    job_time = scrapy.Field()   #发布时间
    job_limit = scrapy.Field()  #应聘资格
    job_company = scrapy.Field()#公司
    job_company_type = scrapy.Field()#公司类型
    job_vip = scrapy.Field()    #公司福利
    job_salary = scrapy.Field() #薪水
    positionId = scrapy.Field() #详情id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;爬虫lg.py:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class LgSpider(scrapy.Spider):

    name = 'lg'
    allowed_domains = ['logou.com']
    start_urls = ['http://logou.com/']

    addrrKey = &quot;深圳&quot;
    carrerKey = &quot;ios&quot;

    //自动登录，获取driver进行操作
    driver = aotulogin()

    base_url = &quot;https://www.lagou.com/jobs/positionAjax.json?&quot;

    //headers
    headers = {
        'Host': 'www.lagou.com',
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:60.0) Gecko/20100101 Firefox/60.0',
        'Referer': 'https://www.lagou.com/jobs/list_python?oquery=android&amp;amp;fromSearch=true&amp;amp;labelWords=relative&amp;amp;city=%E6%B7%B1%E5%9C%B3',
        }

    //参数
    params = {
        'city': addrrKey.encode('utf-8'),
        'kd': carrerKey.encode('utf-8'),
        'pn': '1',
    }

    def start_requests(self): 

        for page in range(1, page_count+1):
            yield scrapy.FormRequest(self.base_url, headers=self.headers, formdata=self.params, callback=self.parse, dont_filter=True)
            self.params['pn'] = str(page+1)


    def parse(self, response):
        
        //返回的json格式的数据，包含岗位信息
        text = json.loads(response.text)

        try:
            content = text['content']
        except Exception as e:
            print(text)
        finally:
                //解析数据，提取需要的数据
                results = content['positionResult']['result']
                for result in results: 
                    job = LagouItem()
                    job['job_name'] = result['positionName']
                    job['job_addr'] = result['district']
                    job['job_time'] = result['createTime']
                    job['job_limit'] = result['education'] + '、' + result['workYear']
                    job['job_salary'] = result['salary']
                    job['job_company'] = result['companyFullName']
                    job['job_company_type'] = result['financeStage'] + '、' + result['industryField']
                    job['job_vip']  = result['positionAdvantage']
                    job['positionId'] = result['positionId']
                    yield job
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p id=&quot;data&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;对数据进行处理&quot;&gt;对数据进行处理&lt;/h4&gt;

&lt;p&gt;使用Panas进行数据处理
pipelines.py&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class LagouPipeline(object):

    def __init__(self):
        self.name = []
        self.addr = []
        self.time = []
        self.limit = []
        self.company = []
        self.type = []
        self.vip = []
        self.salary = []
        self.page = []
        self.positionId = []

    def process_item(self, item, spider):
        
        self.name.append(item['job_name'])
        self.addr.append(item['job_addr'])
        self.time.append(item['job_time'])
        self.limit.append(item['job_limit'])
        self.company.append(item['job_company'])
        self.type.append(item['job_company_type'])
        self.vip.append(item['job_vip'])   
        self.salary.append(item['job_salary'])
        self.page.append(item['page'])
        self.positionId.append(item['positionId'])
    
    def close_spider(self, spider):
        data = pd.DataFrame({
          'name':self.name,
          'salary':self.salary,
          'addr':self.addr,
          'time':self.time,
          'limit':self.limit,
          'company':self.company,
          'type':self.type,
          'vip':self.vip,
          'page': self.page,
         })
        //以cvs的格式导出结果 
        data.to_csv('./result.csv')
        
        //投递简历
        atlogin.send_resume(spider.driver, self.positionId)
        spider.driver.quit()
        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p id=&quot;filter&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;对符合条件的岗位进行投递简历&quot;&gt;对符合条件的岗位进行投递简历&lt;/h4&gt;

&lt;p&gt;使用自动登陆后获得的driver进行投递简历&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//递归投递，成功就移除岗位详情页的id
def send_resume(driver, arr):
    
    if len(arr) == 0:
        return
    
    //岗位详情页
    url_detail = 'https://www.lagou.com/jobs/'+str(arr[0])+'.html'
    driver.get(url_detail)
    
    //投递简历按钮
    resume_btn = driver.find_element_by_xpath('//div[@class=&quot;resume-deliver&quot;]/a')

    //通过按钮的文本判断是否已投递
    text = resume_btn.get_attribute('innerHTML')
    if '已' in text:
        
        //丢弃已投递的id
        arr.remove(arr[0])

        //进行下一个岗位投递
        send_resume(driver, arr)

        //投递结束，关闭driver
        driver.quit()
        
    else:

        //点击投递按钮
        resume_btn.click()
 
        time.sleep(1)

        //尝试获取弹窗
        try:
            cbox_loaded = driver.find_element_by_xpath('//*[@id=&quot;cboxLoadedContent&quot;]')
        except Exception as e:
            print('获取弹窗失败: ', e)
            #没有弹窗返回
            return

        //弹窗出现后，需要切换当前window
        now = driver.current_window_handle
        driver.switch_to_window(now)

        try:
            //弹出不匹配岗位窗口
            btn = driver.find_element_by_xpath('//div[@id=&quot;cboxContent&quot;]//table//td/a[@class=&quot;btn&quot;]')
            btn.click()
            print('发现不匹配窗口, 点击确认投递')
        except Exception as e:
            //超时／获取不到异常不处理，继续往下走
            pass

        time.sleep(0.2)

        try:
            //弹出达到投递上限
            cancel_btn = driver.find_element_by_xpath('//div[@id=&quot;cboxContent&quot;]//table//td/a[@class=&quot;upper_close&quot;]')
            cancel_btn.click()
            print('发现达到投递上限窗口, 点击取消并退出')
            return
        except Exception as e:
            pass
                
        //递归请求，只有成功投递才能出来   
        send_resume(driver, arr)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在拉钩网上自动投递简历时，需注意:&lt;/p&gt;

&lt;p&gt;1、该岗位已投递, 可以根据投递按钮的文本来判断是否投递。&lt;/p&gt;

&lt;p&gt;2、点击投递按钮后，页面会弹出弹窗，拉钩的弹窗是动态加载的，所以可以尝试获取弹窗是否在页面上显示来进行下一步。&lt;/p&gt;

&lt;p&gt;3、假如没有获取到弹窗，就代表成功，不进行下一步操作。&lt;/p&gt;

&lt;p&gt;4、获取到弹窗后，根据class来判断弹窗是不匹配还是已达投递上限。&lt;/p&gt;

&lt;p&gt;5、假如是不匹配，就直接获取按钮，点击确认投递按钮进行投递。&lt;/p&gt;

&lt;p&gt;6、假如是已达投递上限，获取取消按钮并点击，退出。&lt;/p&gt;

&lt;p id=&quot;timer&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;定时开启任务&quot;&gt;定时开启任务&lt;/h4&gt;

&lt;p&gt;1、编写shell脚本&lt;/p&gt;

&lt;p&gt;start.sh&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#本项目的绝对路径, 打开终端执行&lt;/span&gt;
open &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; Terminal.app /Users/xxx/Lagou/crawl.sh

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;crawl.sh&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /Users/xxx/Lagou/lagou

&lt;span class=&quot;c&quot;&gt;#使用python3执行爬虫任务&lt;/span&gt;
python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; scrapy crawl lg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;update.sh&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

open &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; Terminal.app /Users/xxx/Lagou/ip.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ip.sh&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /Users/xxx/Lagou/lagou
python3 pool.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2、使用crontab定时执行任务&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab -e 

//进入编辑模式
i

//每天17:30点执行
30 17 * * * /xx/Lagou/crontab/start.sh
30 12 * * * /xx/Lagou/crontab/update.sh 

//退出编辑模式
Esc

//进入退出模式
Shitf :

//保存退出
wq Enter

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 02 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tuyuwang.github.io/2018/07/02/Python-VS-%E6%8B%89%E5%8B%BE/</link>
        <guid isPermaLink="true">http://localhost:4000/tuyuwang.github.io/2018/07/02/Python-VS-%E6%8B%89%E5%8B%BE/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>Safiri下载内测包</title>
        <description>
</description>
        <pubDate>Fri, 22 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tuyuwang.github.io/2018/06/22/Safiri%E4%B8%8B%E8%BD%BD%E5%86%85%E6%B5%8B%E5%8C%85/</link>
        <guid isPermaLink="true">http://localhost:4000/tuyuwang.github.io/2018/06/22/Safiri%E4%B8%8B%E8%BD%BD%E5%86%85%E6%B5%8B%E5%8C%85/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>Swift面包</title>
        <description>&lt;p&gt;1、&lt;a href=&quot;https://github.com/Ramotion/expanding-collection&quot;&gt;expanding-collection&lt;/a&gt;源码摘录&lt;/p&gt;

&lt;p&gt;使用枚举值的rawValue来表示图片名称&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Asset: String {

    case backgroundImage = &quot;BackgroundImage&quot;
    case closeButton = &quot;CloseButton&quot;
    case dots
    case face1
    case face2
    case heand
    case icons
    case image
    case item0
    case item1
    case item2
    case item3
    case locationButton
    case map
    case pinIcon
    case searchIcon
    case stars
    case title = &quot;Title&quot;

    //为枚举值添加计算属性，方便获取image
    var image: Image {
        let bundle = Bundle(for: BundleToken.self)
        #if os(iOS) || os(tvOS) || os(watchOS)
            let image = Image(named: rawValue, in: bundle, compatibleWith: nil)
        #elseif os(OSX)
            let image = bundle.image(forResource: rawValue)
        #endif
        guard let result = image else { fatalError(&quot;Unable to load image \(rawValue).&quot;) }
        return result
    }
}

//调用
let image = Asset.backgroundImage.image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;拓展: 实现字符串获取图片的另一种方式&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension String {
    var toImage: UIImage? {
        return UIImage(named: self)
    }
}

//调用
let image = &quot;backgroundImage&quot;.toImage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;typealias的妙用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  typealias ItemInfo = (imageName: String, title: String)
  fileprivate let items: [ItemInfo] = [(&quot;item0&quot;, &quot;Boston&quot;), (&quot;item1&quot;, &quot;New York&quot;), (&quot;item2&quot;, &quot;San Francisco&quot;), (&quot;item3&quot;, &quot;Washington&quot;)]

//调用(类似于类调用属性的形式)
  let info = items[index]
  cell.backgroundImageView?.image = UIImage(named: info.imageName)
  cell.customTitle.text = info.title
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;范型初始化工具，特点：简洁明了，为实例设置属性时不用写实例名称，只用$0就行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;internal func Init&amp;lt;Type&amp;gt;(_ value: Type, block: (_ object: Type) -&amp;gt; Void) -&amp;gt; Type {
    block(value)
    return value
}

//调用
let upGesture = Init(UISwipeGestureRecognizer(target: self, action: #selector(DemoViewController.swipeHandler(_:)))) {
    $0.direction = .up
}
  view.addGestureRecognizer(upGesture)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;遍历所有的子视图，并传给外界&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
protocol SubviewsForEach {
    func subviewsForEach(_ f: (UIView) -&amp;gt; Void)
}

extension SubviewsForEach where Self: UIView {

    func subviewsForEach(_ f: (UIView) -&amp;gt; Void) {
        forEachView(self, f: f)
    }

    fileprivate func forEachView(_ view: UIView, f: (UIView) -&amp;gt; Void) {
        view.subviews.forEach {
            f($0)

            if $0.subviews.count &amp;gt; 0 {
                forEachView($0, f: f)
            }
        }
    }
}

extension UIView: SubviewsForEach {}

//调用
copyView.frontContainerView.subviewsForEach { 
    if $0.tag == Constants.HideKey { 
        $0.alpha = 0 
    } 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2、Kinfisher源码摘录&lt;/p&gt;

&lt;p&gt;3、SwiftyJSON源码摘录&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tuyuwang.github.io/2018/01/16/Swift%E9%9D%A2%E5%8C%85/</link>
        <guid isPermaLink="true">http://localhost:4000/tuyuwang.github.io/2018/01/16/Swift%E9%9D%A2%E5%8C%85/</guid>
        
        <category>iOS</category>
        
        <category>Swift</category>
        
        
      </item>
    
      <item>
        <title>iOS RSA加签</title>
        <description>&lt;p&gt;先贴最终解决方案: &lt;a href=&quot;https://github.com/TuYuWang/iOSSignAndVerify&quot;&gt;SignAndVerify byTun&lt;/a&gt; 支持SHA1、SHA384、SHA256、SHA224、SHA512对摘要数据进行加签。&lt;/p&gt;

&lt;p&gt;故事开端: 服务端人员给我一个私钥字符串(没有头部和尾部字符串)，我需要用私钥对摘要数据进行加签后再发送给服务端进行公钥验签。&lt;/p&gt;

&lt;p&gt;踩坑:服务端生成的私钥字符串是PKCS8格式的，而我们需要的是PKCS1格式的私钥字符串。可以通过字符串长度判断是哪种格式的。&lt;a href=&quot;http://www.5ixuexiwang.com/str/length.php&quot;&gt;在线字符串长度计算&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PKCS#1对应的私钥字符串长度为824(按1024取模)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl genrsa -out private_key.pem 1024
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;PKCS#8对应的私钥字符串长度为861。&lt;/p&gt;

&lt;p&gt;也可以通过以下方法判断私钥的格式:&lt;/p&gt;

&lt;p&gt;PKCS:美国RSA数据安全公司及其合作伙伴制定的一组公钥密码学标准&lt;/p&gt;

&lt;p&gt;PKCS#1:定义RSA公开密钥算法加密和签名机制，主要用于组织PKCS#7中所描述的数字签名和数字信封。&lt;/p&gt;

&lt;p&gt;PKCS#8：描述私有密钥信息格式，该信息包括公开密钥算法的私有密钥以及可选的属性集等.&lt;/p&gt;

&lt;p&gt;RSA Public Key file (PKCS#1)
The RSA Public key PEM file is specific for RSA keys.
It starts and ends with the tags:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-----BEGIN RSA PUBLIC KEY-----
BASE64 ENCODED DATA
-----END RSA PUBLIC KEY-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;RSA Private Key file (PKCS#1)
The RSA private key PEM file is specific for RSA keys.
It starts and ends with the tags:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-----BEGIN RSA PRIVATE KEY-----
BASE64 ENCODED DATA
-----END RSA PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Public Key file (PKCS#8)
Because RSA is not used exclusively inside X509 and SSL/TLS, a more generic key format is available in the form of PKCS#8, that identifies the type of public key and contains the relevant data.
It starts and ends with the tags:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-----BEGIN PUBLIC KEY-----
BASE64 ENCODED DATA
-----END PUBLIC KEY-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Private Key file (PKCS#8)
Because RSA is not used exclusively inside X509 and SSL/TLS, a more generic key format is available in the form of PKCS#8, that identifies the type of private key and contains the relevant data.
The unencrypted PKCS#8 encoded data starts and ends with the tags:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-----BEGIN PRIVATE KEY-----
BASE64 ENCODED DATA
-----END PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;明白了问题出在哪，现在就来说说解决方案：&lt;/p&gt;

&lt;p&gt;1、简单粗暴点就是让后台给你PKCS1格式的私钥字符串。&lt;a href=&quot;http://blog.csdn.net/u010725842/article/details/50614030&quot;&gt;java转openssl的RSA算法公私钥&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、自己转换(PKCS#8-&amp;gt;PKCS#1)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl pkcs8 -in pkcs8.pem -nocrypt -out pri_key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3、用openssl生成iOS／Java使用的公私钥&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//生成模长为1024bit的私钥文件private_key.pem
openssl genrsa -out private_key.pem 1024

//生成证书请求文件rsaCertReq.csr.(这一步会提示输入国家、省份、mail等信息，可以根据实际情况填写，或者全部不用填写，直接全部敲回车.)
openssl req -new -key private_key.pem -out rsaCerReq.csr

//生成证书rsaCert.crt，并设置有效时间为10年
openssl x509 -req -days 3650 -in rsaCerReq.csr -signkey private_key.pem -out rsaCert.crt

//生成供iOS使用的公钥文件public_key.der
openssl x509 -outform der -in rsaCert.crt -out public_key.der

//生成供iOS使用的私钥文件private_key.p12.(这一步会提示给私钥文件设置密码，直接输入想要设置密码即可，然后敲回车，然后再验证刚才设置的密码，再次输入密码，然后敲回车，完毕！)
openssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt

//生成供Java使用的公钥rsa_public_key.pem
openssl rsa -in private_key.pem -out rsa_public_key.pem -pubout

//生成供Java使用的私钥pkcs8_private_key.pem
openssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nice!有了正确的私钥后，接下来就是加签了，使用文件路径读取私钥的请看这里&lt;a href=&quot;http://blog.csdn.net/zhangmengleiblog/article/details/51362761&quot;&gt;任意门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里我使用的是这个框架&lt;a href=&quot;https://github.com/yubin-X/iOSSignAndVerify&quot;&gt;SignAndVerify&lt;/a&gt;,这个框架默认是通过私钥字符串用SHA1算法加签，而服务端是需要用SHA384算法进行加签，所以就fork一下，然后进行拓展&lt;a href=&quot;https://github.com/TuYuWang/iOSSignAndVerify&quot;&gt;SignAndVerify byTun&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;基本概念&quot;&gt;基本概念：&lt;/h4&gt;

&lt;p&gt;数字签名：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;只有信息的发送者才能产生的别人无法伪造的一段数字串，对信息发送者发送信息真实性的有效证明。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;发送报文时，发送方用一个哈希函数从报文文本中生成报文摘要，然后用私钥对摘要进行加密，将加密后的摘要作为数字签名和报文一起发送给接收方。接收方首先用与发送方一样的哈希函数从接收到的原始报文中计算出报文摘要，接着再用发送方的公钥对报文附加的数字签名进行解密，如果这两个摘要相同，那么接收方就能确认该数字签名是发送方的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;作用: 1、能确定消息确实是由发送方签名并发出来的。2、数字签名能确定消息的完整性。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;哈希函数(哈希算法):将任意长度的二进制值映射为较短的固定长度的二进制值，这个小的二进制值称为哈希值。它是一种单向密码体制,即它是一个从明文到密文的不可逆的映射,只有加密过程,没有解密过程。&lt;/p&gt;

&lt;p&gt;RSA算法:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1977年由Ron Rivest、Adi Shamirh和LenAdleman发明的，RSA就是取自他们三个人的名字。算法基于一个数论：将两个大素数相乘非常容易，但要对这个乘积的结果进行因式分解却非常困难，因此可以把乘积公开作为公钥。该算法能够抵抗目前已知的所有密码攻击。RSA算法是一种非对称算法，算法需要一对密钥，使用其中一个加密，需要使用另外一个才能解密。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;作用: 1、用私钥在客户端加签，然后公钥在服务器用公钥验签。防抵赖，防止别人模拟我们的客户端来攻击我们的服务器，导致瘫痪。2、用公钥加密数据，以及服务器端用私钥解密。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;iOS加解密(导入Security.framework)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SecKeyEncrypt：使用公钥对数据进行加密。&lt;/li&gt;
  &lt;li&gt;SecKeyDecrypt：使用私钥对数据进行解密。&lt;/li&gt;
  &lt;li&gt;SecKeyRawVerify：使用公钥对数字签名和数据进行验证，以确认该数据的来源合法性。&lt;/li&gt;
  &lt;li&gt;SecKeyRawSign：使用私钥对数据进行摘要并生成数字签名。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 11 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tuyuwang.github.io/2017/12/11/RSA%E5%8A%A0%E7%AD%BE/</link>
        <guid isPermaLink="true">http://localhost:4000/tuyuwang.github.io/2017/12/11/RSA%E5%8A%A0%E7%AD%BE/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS开发小技巧</title>
        <description>&lt;h2 id=&quot;分类&quot;&gt;分类&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#tableView&quot;&gt;UITableView系列&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#textField&quot;&gt;UITextField系列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;tableView&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;uitableview系列&quot;&gt;UITableView系列&lt;/h3&gt;

&lt;h4 id=&quot;uitableviewcell灰线显示方案&quot;&gt;UITableViewCell灰线显示方案&lt;/h4&gt;

&lt;p&gt;思路：重写UItableViewCell， 将需要显示的子视图都添加到contenView上，并进行约束，将cell的颜色设置为白色，contentView的颜色设置为灰色，定义接口设置contentView的edges，可通过传入正数或负数控制灰线显示顶部还是底部和灰线的高度&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension UITableViewCell {
    public func setLineHeight(_ height: Int) {
        let top = max(height, 0)
        let bottom = abs(min(height, 0))
        contentView.snp.updateConstraints { (ConstraintMaker) in
            ConstraintMaker.edges.equalTo(UIEdgeInsetsMake(top, 0, bottom, 0))
        }
        layoutSubviews()
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p id=&quot;textField&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;uitextfield系列&quot;&gt;UITextField系列&lt;/h3&gt;

&lt;h4 id=&quot;调整textfield内容显示-如图&quot;&gt;调整textField内容显示, 如图&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://tuyuwang.github.io/img/Tips/demo-0.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//重写
- (CGRect)leftViewRectForBounds:(CGRect)bounds
{
    CGRect iconRect = [super leftViewRectForBounds:bounds];
    iconRect.origin.x += 10;// 右偏10
    return iconRect;
}

- (CGRect)textRectForBounds:(CGRect)bounds
{
    CGRect iconRect = [super textRectForBounds:bounds];
    iconRect.origin.x += 10;// 右偏10
    return iconRect;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 08 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tuyuwang.github.io/2017/09/08/Tips/</link>
        <guid isPermaLink="true">http://localhost:4000/tuyuwang.github.io/2017/09/08/Tips/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>Alamofire实战记录</title>
        <description>&lt;h3 id=&quot;urlrequestconvertible-协议的使用&quot;&gt;URLRequestConvertible 协议的使用&lt;/h3&gt;

&lt;p&gt;创建一个路由枚举，调用效果如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let loginRequest = EnterRouter.login(userPhone, userPassword)
        request(loginRequest).responseJSON { (respone) in
            print(JSON(respone.result.value ?? &quot;&quot;))
        }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
let baseURL = &quot;http://xxxxx&quot;
var TNParamters = [String: String]()

enum EnterRouter: URLRequestConvertible {
    
    case login(String, String)
    case regist(String, String, String)
    case logout
    
    private var httpMethod: HTTPMethod {
        return .post
    }
    
    private var method: String {
        switch self {
        case .login:
            return &quot;user.login&quot;
        case .regist:
            return &quot;user.regist&quot;
        case .logout:
            return &quot;user.logout&quot;
        }
    }
    
    private var paramters: [String: Any] {
        
        switch self {
        case .login(let userName, let password):
            TNParamters.updateValue(userName, forKey: &quot;phoneNo&quot;)
            TNParamters.updateValue(password, forKey: &quot;password&quot;)
            return baseParamters
            
        case .regist(let userName, let password, let verifyCode):
            
            TNParamters.updateValue(userName, forKey: &quot;phoneNo&quot;)
            TNParamters.updateValue(password, forKey: &quot;password&quot;)
            TNParamters.updateValue(verifyCode, forKey: &quot;verifyCode&quot;)
            return baseParamters
            
        case .logout:
            
            return baseParamters
        }
    }
    
    private var baseParamters: [String: Any] {
            TNParamters.updateValue(method, forKey: &quot;method&quot;)
            return TNParamters
    }
    
    func asURLRequest() throws -&amp;gt; URLRequest {
        
        let url = URL(string: baseURL)
        var request = URLRequest(url: url!)
        request.httpMethod = httpMethod.rawValue
        do {
            let result = try URLEncoding.default.encode(request, with: paramters)
            return result
        } catch let error {
            return request
        }
    }


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 03 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tuyuwang.github.io/2017/09/03/Alamofire/</link>
        <guid isPermaLink="true">http://localhost:4000/tuyuwang.github.io/2017/09/03/Alamofire/</guid>
        
        <category>iOS</category>
        
        <category>Swift</category>
        
        
      </item>
    
      <item>
        <title>Welcome to Tun Blog</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Hello World, Hello Blog.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#preview&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tools&quot;&gt;工具&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#build1&quot;&gt;搭建本地博客&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#build2&quot;&gt;部署线上博客&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;前言&quot;&gt;前言&lt;/h4&gt;

&lt;p&gt;我说：要有blog。所以就有了Tun Blog。&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;tools&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;工具&quot;&gt;工具&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Jekylly&lt;/li&gt;
  &lt;li&gt;GitHub Pages&lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;build1&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;搭建本地博客&quot;&gt;搭建本地博客&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;安装Jeklly
    &lt;blockquote&gt;
      &lt;p&gt;gem install jekyll&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;创建blog文件
    &lt;blockquote&gt;
      &lt;p&gt;jekyll new blog&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;进入blog文件
    &lt;blockquote&gt;
      &lt;p&gt;cd blog&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;运行服务
    &lt;blockquote&gt;
      &lt;p&gt;jekyll serve&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;打开浏览器
    &lt;blockquote&gt;
      &lt;p&gt;http://localhost:4000&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;p&gt;blog文件结构&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_cofig.yml  #配置全局信息
_posts      #存放博文(有一个markdown的默认博文)
_site       #存放jekyll转化生成的页面
about.md    #关于
Gemfile
Gemfile.lock
index.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;hr /&gt;
&lt;p&gt;jekyll常用命令&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll build             #修改内容后使用，更新界面
jekyll serve -B          #后台运行服务
jekyll serve             #运行服务
jekyll serve --watch     #可以边修改，边刷新界面
ps aux|grep jekyllch     #查看jekyll后台运行的进程
kill -9 线程号            #关闭线程，在同一个jekyll生成的文件下，只能运行一个进程 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p id=&quot;build2&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;部署线上博客&quot;&gt;部署线上博客&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Create a new respository, Respository name -&amp;gt; yourGithubUserName.github.io&lt;/li&gt;
  &lt;li&gt;Choose a theme on Settings&lt;/li&gt;
  &lt;li&gt;Clone this Respository&lt;/li&gt;
  &lt;li&gt;Copy the blog content file to Respository ,then commit change to github&lt;/li&gt;
  &lt;li&gt;Open the URL : https://yourGithubUserName.github.io&lt;/li&gt;
&lt;/ol&gt;

&lt;p id=&quot;resources&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;参考资料&quot;&gt;参考资料&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekylly官网&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Huxpro/huxpro.github.io/blob/master/README.zh.md&quot;&gt;Theme by Hux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 18 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/tuyuwang.github.io/2017/05/18/%E7%94%9F%E6%B4%BB/</link>
        <guid isPermaLink="true">http://localhost:4000/tuyuwang.github.io/2017/05/18/%E7%94%9F%E6%B4%BB/</guid>
        
        <category>生活</category>
        
        
      </item>
    
  </channel>
</rss>
